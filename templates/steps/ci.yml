parameters:
  solution: '**/*.sln'
  msBuildPlatform: Any CPU
  msBuildConfiguration: Release
  unityVersion: ''

steps:
- powershell: |
    Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
    Install-Module UnitySetup -Scope CurrentUser -Force
  displayName: Install Unity Setup Powershell Module
  failOnStderr: true
- powershell: |
    $version = "${{ parameters.unityVersion }}"
    $setupInstance = Get-UnitySetupInstance | Select-UnitySetupInstance -Latest

    If ($version -eq "")
    {
        If (!$setupInstance)
        {
            Write-Error "No Unity version specified and no Unity installation found."
            Exit 1
        }

        Write-Host "Using already installed Unity version '$($setupInstance.Version)'."
    }
    ElseIf ($setupInstance.Version.ToString() -ne $version)
    {
        Write-Host "Installing Unity version '$(Unity.Version)'."
        Install-UnitySetupInstance -Installers (Find-UnitySetupInstaller -Version $version -Components "Windows")
        $setupInstance = Get-UnitySetupInstance | Select-UnitySetupInstance -Version $version
    }

    $path = $setupInstance.Path
    Write-Host "##vso[task.setvariable variable=Unity.Path]$path"
    Write-Host "Using Unity at path '$path'."
  displayName: Install/find Unity
  failOnStderr: true
- task: NuGetToolInstaller@0
  displayName: Use NuGet 4.x
  inputs:
    versionSpec: '>=4.x'
- task: NuGetCommand@2
  displayName: NuGet restore
  inputs:
    restoreSolution: ${{ parameters.solution }}
    vstsFeed: $(Azure.FeedId)
- task: VSBuild@1
  displayName: Build solution
  inputs:
    solution: ${{ parameters.solution }}
    platform: ${{ parameters.msBuildPlatform }}
    configuration: ${{ parameters.msBuildConfiguration }}
    maximumCpuCount: true
    msbuildArchitecture: x64
    msbuildArgs: /p:UnityEditorAssembliesPath="$(Unity.Path)Editor/Data/Managed/"
